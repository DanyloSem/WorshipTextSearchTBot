from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot import keyboards as kb
from bot.song_search import SongSearchService
from logs.log_config import logger

router = Router()
sss = SongSearchService()


class UserState(StatesGroup):
    search_method = State()
    search_query = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(f'–í—ñ—Ç–∞—é {message.from_user.first_name}!\n–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:',
                         reply_markup=kb.search_method)
    await state.set_state(UserState.search_method)


@router.message(UserState.search_method)
async def process_search_method(message: Message, state: FSMContext):
    search_method = message.text

    if search_method in ['üìö –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é', 'üìù –ü–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º']:
        await state.update_data(search_method=search_method)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É:', reply_markup=kb.remove_keyboard)
        await state.set_state(UserState.search_query)
    else:
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:')


def format_songs_list(chunk):
    return "\n".join([f"‚ñ∂Ô∏è {index}. {song['title']}\n–¢–µ–∫—Å—Ç: {song['url']}\n" for index, song in chunk.items()])


def create_pagination_keyboard(current_page, total_pages):
    buttons = []

    # –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ 5 –∞–±–æ –º–µ–Ω—à–µ
    if total_pages <= 5:
        for i in range(total_pages):
            if i == current_page:
                buttons.append(InlineKeyboardButton(text=f"-{i + 1}-", callback_data=f"page_{i}"))
            else:
                buttons.append(InlineKeyboardButton(text=f"{i + 1}", callback_data=f"page_{i}"))
    else:
        # –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        if current_page == 0 and total_pages > 5:
            buttons.append(InlineKeyboardButton(text="-1-", callback_data="page_0"))
            buttons.append(InlineKeyboardButton(text="2", callback_data="page_1"))
            buttons.append(InlineKeyboardButton(text="3", callback_data="page_2"))
            buttons.append(InlineKeyboardButton(text="4", callback_data="page_3"))
            buttons.append(InlineKeyboardButton(text=f">>{total_pages}", callback_data=f"page_{total_pages - 1}"))
        # –î—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        elif current_page == 1 and total_pages > 5:
            buttons.append(InlineKeyboardButton(text="1", callback_data="page_0"))
            buttons.append(InlineKeyboardButton(text="-2-", callback_data="page_1"))
            buttons.append(InlineKeyboardButton(text="3", callback_data="page_2"))
            buttons.append(InlineKeyboardButton(text="4", callback_data="page_3"))
            buttons.append(InlineKeyboardButton(text=f">>{total_pages}", callback_data=f"page_{total_pages - 1}"))
        # –¢—Ä–µ—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        elif current_page == 2 and total_pages > 5:
            buttons.append(InlineKeyboardButton(text="1", callback_data="page_0"))
            buttons.append(InlineKeyboardButton(text="2", callback_data="page_1"))
            buttons.append(InlineKeyboardButton(text="-3-", callback_data="page_2"))
            buttons.append(InlineKeyboardButton(text="4", callback_data="page_3"))
            buttons.append(InlineKeyboardButton(text=f">>{total_pages}", callback_data=f"page_{total_pages - 1}"))
        # –¢—Ä–µ—Ç—è –∑ –∫—ñ–Ω—Ü—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        elif current_page == total_pages - 3 and total_pages > 5:
            buttons.append(InlineKeyboardButton(text="<<1", callback_data="page_0"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 3}", callback_data=f"page_{total_pages - 4}"))
            buttons.append(InlineKeyboardButton(text=f"-{total_pages - 2}-", callback_data=f"page_{total_pages - 3}"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 1}", callback_data=f"page_{total_pages - 2}"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages}", callback_data=f"page_{total_pages - 1}"))
        # –ü–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        elif current_page == total_pages - 2 and total_pages > 5:
            buttons.append(InlineKeyboardButton(text="<<1", callback_data="page_0"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 3}", callback_data=f"page_{total_pages - 4}"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 2}", callback_data=f"page_{total_pages - 3}"))
            buttons.append(InlineKeyboardButton(text=f"-{total_pages - 1}-", callback_data=f"page_{total_pages - 2}"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages}", callback_data=f"page_{total_pages - 1}"))
        # –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        elif current_page == total_pages - 1 and total_pages > 5:
            buttons.append(InlineKeyboardButton(text="<<1", callback_data="page_0"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 3}", callback_data=f"page_{total_pages - 4}"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 2}", callback_data=f"page_{total_pages - 3}"))
            buttons.append(InlineKeyboardButton(text=f"{total_pages - 1}", callback_data=f"page_{total_pages - 2}"))
            buttons.append(InlineKeyboardButton(text=f"-{total_pages}-", callback_data=f"page_{total_pages - 1}"))
        else:
            # –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            if current_page > 1:
                buttons.append(InlineKeyboardButton(text="<<1", callback_data="page_0"))
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            if current_page > 0:
                buttons.append(InlineKeyboardButton(text=f"{current_page}", callback_data=f"page_{current_page - 1}"))
            # –¢–µ–ø–µ—Ä—ñ—à–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            buttons.append(InlineKeyboardButton(text=f"-{current_page + 1}-", callback_data=f"page_{current_page}"))
            # –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            if current_page < total_pages - 1:
                buttons.append(InlineKeyboardButton(text=f"{current_page + 2}", callback_data=f"page_{current_page + 1}"))
            # –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            if current_page < total_pages - 2:
                buttons.append(InlineKeyboardButton(text=f">>{total_pages}", callback_data=f"page_{total_pages - 1}"))

    # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –µ—Ç–∞–ø—É –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É –ø–æ—à—É–∫—É
    return_button = InlineKeyboardButton(text="üîç –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—à—É–∫—É", callback_data="return_to_search_method")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons, [return_button]])
    return keyboard


@router.message(UserState.search_query)
async def process_search_query(message: Message, state: FSMContext):
    search_text = message.text
    await state.update_data(search_text=search_text)
    search_data = await state.get_data()
    songs_dict = sss.get_songs_dict(search_data)
    await state.update_data(songs_dict=songs_dict)

    if songs_dict:
        chunks = [dict(list(songs_dict.items())[i:i+7]) for i in range(0, len(songs_dict), 7)]
        chunk = chunks[0]
        songs_list = format_songs_list(chunk)
        pagination_keyboard = create_pagination_keyboard(0, len(chunks))
        answer = f"üìñ –ü—ñ—Å–Ω—ñ –≤—ñ–¥ 1 –¥–æ {min(7, len(songs_dict))}:\n\n{songs_list}"
        await message.answer(answer, reply_markup=pagination_keyboard)
    else:
        await message.answer('–ñ–æ–¥–Ω–æ—ó –ø—ñ—Å–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=kb.search_method)
        await state.set_state(UserState.search_method)


@router.callback_query(lambda c: c.data and c.data.startswith('page_'))
async def process_page_callback(callback_query: CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    data = await state.get_data()
    songs_dict = data.get('songs_dict')
    chunks = [dict(list(songs_dict.items())[i:i+7]) for i in range(0, len(songs_dict), 7)]

    if page < len(chunks):
        chunk = chunks[page]
        songs_list = format_songs_list(chunk)
        pagination_keyboard = create_pagination_keyboard(page, len(chunks))
        answer = f"üìñ –ü—ñ—Å–Ω—ñ –≤—ñ–¥ {page*7+1} –¥–æ {min((page+1)*7, len(songs_dict))}:\n\n{songs_list}"
        await callback_query.message.edit_text(answer, reply_markup=pagination_keyboard)
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('http'))
async def process_song_selection(callback_query: CallbackQuery, state: FSMContext):
    song_url = callback_query.data

    lyrics = sss.get_song_text(song_url)

    await callback_query.message.answer(lyrics)
    await callback_query.answer()

    await callback_query.message.answer('–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø—ñ—Å–Ω—é –∞–±–æ –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:', reply_markup=kb.search_method)
    await state.set_state(UserState.search_method)


@router.callback_query(lambda c: c.data == "return_to_search_method")
async def return_to_search_method(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:', reply_markup=kb.search_method)
    await state.set_state(UserState.search_method)
    await callback_query.answer()
