import hashlib
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineQuery, InputTextMessageContent, InlineQueryResultArticle
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot import keyboards as kb
from bot.song_search import SongSearchService
from logs.log_config import logger


router = Router()
sss = SongSearchService()


class UserState(StatesGroup):
    search_method = State()
    search_query = State()
    display_songs = State()


def format_songs_list(chunk):
    return "\n".join([f"‚ñ∂Ô∏è {index}. {song['title']}\n–¢–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ: /id_{song['id']}\n" for index, song in chunk.items()])


async def display_songs_list(message: Message, state: FSMContext):
    data = await state.get_data()
    songs_dict = data.get('songs_dict')

    if songs_dict:
        chunks = [dict(list(songs_dict.items())[i:i+7]) for i in range(0, len(songs_dict), 7)]
        chunk = chunks[0]
        songs_list = format_songs_list(chunk)
        pagination_keyboard = kb.create_pagination_keyboard(0, len(chunks))
        answer = f"üìñ –ü—ñ—Å–Ω—ñ –≤—ñ–¥ 1 –¥–æ {min(7, len(songs_dict))}:\n\n{songs_list}"
        await message.answer(answer, reply_markup=pagination_keyboard)
    else:
        await message.answer('–ñ–æ–¥–Ω–æ—ó –ø—ñ—Å–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=kb.search_method)
        await state.set_state(UserState.search_method)


@router.inline_query()
async def inline_echo(inline_query: InlineQuery):
    # inline_query - —Ü–µ –æ–±'—î–∫—Ç, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
    # inline_query.id - —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É
    # inline_query.query - —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É
    # —ñ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
    text = inline_query.query
    if not text:
        text = '–ü–µ—Ä–µ–ª—ñ–∫ –ø—ñ—Å–µ–Ω—å –ø–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—é, –∞–±–æ –∑–∞–≥–ª—É—à–∫–∞ —Ç–∏–ø—É "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É"'

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
    result_id: str = hashlib.md5(text.encode()).hexdigest()

    # C—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç InputTextMessageContent —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç:
    input_content = InputTextMessageContent(message_text=text)

    # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É:
    item = InlineQueryResultArticle(
        id=result_id,  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —è–∫ –∑–∞–≤–≥–æ–¥–Ω–æ)
        input_message_content=input_content,  # –í–º—ñ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        title='–ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ',  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        description='–û–ø–∏—Å –ø—ñ—Å–Ω—ñ',  # –û–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        url='https://www.google.com',  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        thumb_url='https://www.google.com/favicon.ico'  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤ —è–∫–æ–º—É results - —Å–ø–∏—Å–æ–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
    await inline_query.answer(results=[item])


@router.message(F.text.startswith('/id_'))
async def process_song_id(message: Message, state: FSMContext):
    logger.info(f'User input: {message.text}')
    song_id = message.text[4:]  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à—ñ 4 —Å–∏–º–≤–æ–ª–∏ '/'
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ä–µ—à—Ç–∞ —Ç–µ–∫—Å—Ç—É —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –ø—ñ—Å–Ω—ñ
    if song_id.isdigit():
        logger.info(f'Song ID: {song_id}')
        lyrics = sss.get_song_text(song_id)

        if lyrics:
            await message.answer(lyrics, reply_markup=kb.search_method)
        else:
            await message.answer('–¢–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=kb.search_method)
        await state.set_state(UserState.search_method)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(f'–í—ñ—Ç–∞—é {message.from_user.first_name}!\n–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:',
                         reply_markup=kb.search_method)
    await state.set_state(UserState.search_method)


@router.message(UserState.search_method)
async def process_search_method(message: Message, state: FSMContext):
    search_method = message.text

    if search_method in ['üìö –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é', 'üìù –ü–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º']:
        await state.update_data(search_method=search_method)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É:', reply_markup=kb.remove_keyboard)
        await state.set_state(UserState.search_query)
    else:
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:')


@router.message(UserState.search_query)
async def process_search_query(message: Message, state: FSMContext):
    search_text = message.text
    await state.update_data(search_text=search_text)
    search_data = await state.get_data()
    songs_dict = sss.get_songs_dict(search_data)
    await state.update_data(songs_dict=songs_dict)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω display_songs
    await state.set_state(UserState.display_songs)
    await display_songs_list(message, state)


@router.callback_query(F.data.startswith('page_'))
async def process_page_callback(callback_query: CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    data = await state.get_data()
    songs_dict = data.get('songs_dict')
    chunks = [dict(list(songs_dict.items())[i:i+7]) for i in range(0, len(songs_dict), 7)]

    if page < len(chunks):
        chunk = chunks[page]
        songs_list = format_songs_list(chunk)
        pagination_keyboard = kb.create_pagination_keyboard(page, len(chunks))
        answer = f"üìñ –ü—ñ—Å–Ω—ñ –≤—ñ–¥ {page*7+1} –¥–æ {min((page+1)*7, len(songs_dict))}:\n\n{songs_list}"
        await callback_query.message.edit_text(answer, reply_markup=pagination_keyboard)
    await callback_query.answer()


@router.message(UserState.display_songs)
async def handle_display_songs(message: Message):
    await message.reply("I don't understand you :(")


@router.callback_query(F.data == "return_to_search_method")
async def return_to_search_method(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:', reply_markup=kb.search_method)
    await state.set_state(UserState.search_method)
    await callback_query.answer()
