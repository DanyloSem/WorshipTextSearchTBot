from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import bot.keyboards as kb
import bot.song_search as ss

router = Router()

class SongSelection(StatesGroup):
    search_method = State()
    search_query = State()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(f'–í—ñ—Ç–∞—é {message.from_user.first_name}!\n–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:',
                        reply_markup=kb.search_method_kb)
    await state.set_state(SongSelection.search_method)

@router.message(SongSelection.search_method)
async def process_search_method(message: Message, state: FSMContext):
    search_method = message.text
    if search_method in ['üìö–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é', 'üìù–ü–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º']:
        await state.update_data(search_method=search_method)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É:', reply_markup=kb.remove_kb)
        await state.set_state(SongSelection.search_query)
    else:
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:')

@router.message(SongSelection.search_query)
async def process_search_query(message: Message, state: FSMContext):
    search_text = message.text
    await state.update_data(search_text=search_text)
    search_data = await state.get_data()
    songs_dict = ss.get_songs_dict(search_data)
    
    if songs_dict:
        chunks = [dict(list(songs_dict.items())[i:i+20]) for i in range(0, len(songs_dict), 20)]

        total_songs = len(songs_dict)
        for i, chunk in enumerate(chunks):
            inline_keyboard = await kb.inline_songs(chunk)
            start = i * 20 + 1
            end = min((i + 1) * 20, total_songs)
            await message.answer(f'–ü—ñ—Å–Ω—ñ –≤—ñ–¥ {start} –¥–æ {end}:', reply_markup=inline_keyboard)
    else:
        await message.answer('–ñ–æ–¥–Ω–æ—ó –ø—ñ—Å–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        await message.answer('–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:', reply_markup=kb.search_method_kb)
        await state.set_state(SongSelection.search_method)

@router.callback_query(lambda c: c.data.startswith('http'))
async def process_song_selection(callback_query: CallbackQuery, state: FSMContext):
    song_url = callback_query.data

    lyrics = ss.get_song_text(song_url)
    
    await callback_query.message.answer(lyrics)
    await callback_query.answer()
    
    await callback_query.message.answer('–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø—ñ—Å–Ω—é –∞–±–æ –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É:', reply_markup=kb.search_method_kb)
    await state.set_state(SongSelection.search_method)